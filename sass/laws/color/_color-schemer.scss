@import "color-schemer/blend-modes";

// Defaults
$cs-primary: $color;
$cs-scheme: $scheme;
$cs-hue-offset: 30 !default;
$cs-brightness-offset: false !default;
$cs-color-model: rgb !default;
$cs-colorblind: normal !default;

// Partials
@import "color-schemer/index";

// Tell other files that this is loaded.
$color-schemer-loaded: true;

// Sets the text contrast.
$white-text-lightness: 15%;
$light-text-lightness: 25%;

// Invert the contrast value for dark colors
$black-text-lightness: 100% - $white-text-lightness;
$dark-text-lightness: 100% - $light-text-lightness;

@function color-primaryer($tone) {
	@if $tone == white {
		@return cs-primary($color);
	}
	@else if $tone == light {
		@return set-lightness(cs-primary($color), $light-text-lightness);
	}
	@else if $tone == dark {
		@return set-lightness(cs-primary($color), $dark-text-lightness);
	}
	@else if $tone == black {
		@return cs-primary($color);
	}
}

@function color-secondaryer($tone) {
	@if $scheme == mono {
		@return color-texter($tone);
	}
	@else {
		@if $tone == white {
			@return cs-secondary($color);
		}
		@else if $tone == light {
			@return set-lightness(cs-secondary($color), $light-text-lightness);
		}
		@else if $tone == dark {
			@return set-lightness(cs-secondary($color), $dark-text-lightness);
		}
		@else if $tone == black {
			@return cs-secondary($color);
		}
	}
}

@function color-texter($tone) {
	@if $tone == white {
		@return set-lightness($color, $white-text-lightness);
	}
	@else if $tone == light {
		@return set-lightness($color, $light-text-lightness);
	}
	@else if $tone == dark {
		@return set-lightness($color, $dark-text-lightness);
	}
	@else if $tone == black {
		@return set-lightness($color, $black-text-lightness);
	}
}

@function color-accenter($tone) {
	@if $tone == white {
		@return adjust-hue($color, 30deg);
	}
	@else if $tone == light {
		@return shade($color, $light-text-lightness);
	}
	@else if $tone == dark {
		@return tint($color, $light-text-lightness);
	}
	@else if $tone == black {
		@return adjust-hue($color, -30deg);
	}
}

@function color-backgrounder($tone) {
	@if $tone == white {
		@return set-lightness($color, 98%);
	}
	@else if $tone == light {
		@return set-lightness($color, $black-text-lightness);
	}
	@else if $tone == dark {
		@return set-lightness($color, $white-text-lightness);
	}
	@else if $tone == black {
		@return set-lightness($color, 2%);
	}
}

@function color-drawerer($tone) {
	@if $tone == white {
		@return set-lightness(color-backgrounder($tone), $black-text-lightness);
	}
	@else if $tone == light {
		@return set-lightness(color-backgrounder($tone), $dark-text-lightness);
	}
	@else if $tone == dark {
		@return set-lightness(color-backgrounder($tone), $light-text-lightness);
	}
	@else if $tone == black {
		@return set-lightness(color-backgrounder($tone), $white-text-lightness);
	}
}

$color-primary: color-primaryer($tone) !default;
$color-secondary: color-secondaryer($tone) !default;
$color-tertiary: cs-tertiary($color) !default;
$color-text: color-texter($tone) !default;
$color-accent: color-accenter($tone) !default;
$color-background: color-backgrounder($tone) !default;
$color-drawer: color-drawerer($tone) !default;

* body {
	color: $color-text;
	//background-color: $color-background;
	background: -webkit-linear-gradient($color-background, tint($color-background, 5%));
	background-attachment: fixed;
	background-repeat: no-repeat;
}


// Color classes
//
// These color classes provide the ability to style objects as an "object" with a specific color.
// Use them to create your own
$color-input-background: $color-drawer !default;
$color__header--h1: $color-primary !default;
$colorLightness: 80%;
$colorSaturation: 80;
$color-infrared: set-saturation(set-lightness(set-hue($color-primary, 352.5), $colorLightness), $colorSaturation);
$color-red: set-saturation(set-lightness(set-hue($color-primary, 0), $colorLightness), $colorSaturation);
$color-orange: set-saturation(set-lightness(set-hue($color-primary, 30), $colorLightness), $colorSaturation);
$color-yellow: set-saturation(set-lightness(set-hue($color-primary, 60), $colorLightness), $colorSaturation);
$color-green: set-saturation(set-lightness(set-hue($color-primary, 120), $colorLightness), $colorSaturation);
$color-blue: set-saturation(set-lightness(set-hue($color-primary, 240), $colorLightness), $colorSaturation);
$color-indigo: set-saturation(set-lightness(set-hue($color-primary, 255), $colorLightness), $colorSaturation);
$color-violet: set-saturation(set-lightness(set-hue($color-primary, 270), $colorLightness), $colorSaturation);
$color-ultraviolet: set-saturation(set-lightness(set-hue($color-primary, 337.5), $colorLightness), $colorSaturation);

.infrared {
	@include object($color-infrared);
}

.red {
	@include object($color-red);
}

.orange {
	@include object($color-orange);
}

.yellow {
	@include object($color-yellow);
}

.green {
	@include object($color-green);
}

.blue {
	@include object($color-blue);
}

.indigo {
	@include object($color-indigo);
}

.violet {
	@include object($color-violet);
}

.ultraviolet {
	@include object($color-ultraviolet);
}

.color-primary {
	@include object($color-primary);
	&.inset {
		box-shadow: none;
		@include box-shadow-inset($color-primary);
	}
}

.color-secondary {
	@include object($color-secondary);
	&.inset {
		box-shadow: none;
		@include box-shadow-inset($color-secondary);
	}
}

.color-tertiary {
	@include object($color-tertiary);
	&.inset {
		box-shadow: none;
		@include box-shadow-inset($color-tertiary);
	}
}

.color-accent {
	@include object($color-accent);
	&.inset {
		box-shadow: none;
		@include box-shadow-inset($color-accent);
	}
}

.color-text {
	@include object($color-text);
	&.inset {
		box-shadow: none;
		@include box-shadow-inset($color-text);
	}
}

.color-drawer {
	@include object($color-drawer);
	&.inset {
		box-shadow: none;
		@include box-shadow-inset($color-drawer);
	}
}

.color-background {
	@include object($color-background);
	&.inset {
		box-shadow: none;
		@include box-shadow-inset($color-background);
	}
}