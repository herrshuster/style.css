/////////////////
// Semantic.gs // for SCSS: http://sass-lang.com/
/////////////////

// Defaults which you can freely override
$column-width: 60px;
$gutter-width: 0;
$columns: 12;

// Utility function â€” you should never need to modify this
@function gridsystem-width($columns:$columns) {
	@return ($column-width * $columns) + ($gutter-width * $columns);
}

// Set $total-width to 100% for a fluid layout
$total-width: 100%;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	*zoom:1;

	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}


//////////
// GRID //
//////////

body {
	width: 100%;	
	@include clearfix();
	&:after{
		display: block;}}

@mixin row($columns:$columns) {
	display: block;
	width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
	@include clearfix();}

@mixin column($x,$columns:$columns) {
	width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));}

@mixin push($offset,$contextcolumns) {
	position: absolute;
	right: $total-width*(((($column-width)*$offset)) / gridsystem-width($contextcolumns));}

@mixin pull($offset,$contextcolumns) {
	position: absolute;
	left: $total-width*(((($column-width)*$offset)) / gridsystem-width($contextcolumns));}

@mixin object($color, $opacity: 1){
	@if $opacity == 1{
		background-color: $color;
	}
	@else{
		background-color: rgba(red($color), green($color), blue($color), $opacity);
	}
	@if $gradient == very-yes{
		background: linear-gradient(tint($color, $gradient-separation), $color);
	}
	@include box-shadow($color);
}
@mixin box-shadow($on-background){	
	border: 0px solid;
	border-radius: $unit__border-radius;
	border-bottom: $unit__border-radius solid $color__3d--dark;		
	box-shadow: 0 $unit__shadow-size $unit__shadow-blur rgba(0, 0, 0, $unit__shadow-opacity);
}

@mixin box-shadow-inset($on-background){	
	border: none;
	border-radius: $unit__border-radius;
	border-top: $unit__border-radius solid $color__3d--dark;
		
	
	@if $tone == black{
		box-shadow: none;}
	@else if $tone == white{
		border-left: 1px solid rgba(0,0,0, $unit__shadow-opacity / 2);
		border-right: 1px solid rgba(0,0,0, $unit__shadow-opacity / 2);
		border-bottom: 1px solid rgba(0,0,0, $unit__shadow-opacity / 4);
	}
}
@mixin text-shadow{
	@if $skeu == faux-flat{
		text-shadow: $unit__shadow-size $unit__shadow-size 0px rgba(0, 0, 0, 0.42);}
	@else if $skeu == cartoon{
		text-shadow: $unit__shadow-size $unit__shadow-size 0px rgba(0, 0, 0, 0.85);}
}
@mixin text-shadow-inset{
	@if $skeu == faux-flat{
		text-shadow: $unit__shadow-size -$unit__shadow-size 0px rgba(0, 0, 0, 0.42);}
    @else if $skeu == cartoon{
    	text-shadow: $unit__shadow-size $unit__shadow-size 0px rgba(0, 0, 0, 0.85);}
   		-webkit-background-clip: text;
   		-moz-background-clip: text;
		background-clip: text;}

@mixin transition($length: $length__transition){
	transition: all $length ease-in-out;
	-moz-transition: all $length ease-in-out;
	-webkit-transition: all $length ease-in-out;}


@function typography($element,$attribute){
	@if $element == p{@return map-get($root, $attribute);}
	@else if $element == small{	@return map-get($small-text, $attribute);}
	@else {
		@if $quality ==  min {
			@if $element == h1{@return map-get($note5, $attribute);}
			@else {@return map-get($noteb3, $attribute);}
		}
		@else if $quality ==  maj {
			@if $element == h1{@return map-get($note5, $attribute);}
			@else {@return map-get($note3, $attribute)}
		}
		@else if $quality ==  dim {
			@if $element == h1{@return map-get($noteb5, $attribute);}
			@else {@return map-get($noteb3, $attribute);}
		}
		@else if $quality ==  aug {
			@if $element == h1{@return map-get($notes5, $attribute);}
			@else {@return map-get($note3, $attribute)}
		}
		@else if $quality ==  augmin7 {
			@if $element == h1{@return map-get($noteb7, $attribute);}
			@else if $element == h2{@return map-get($notes5, $attribute);}
			@else {	@return map-get($note3, $attribute);}
		}
		@else if $quality ==  sus {
			@if $element == h1{@return map-get($note5, $attribute);}
			@else if $element == h2{@return map-get($note4, $attribute);}
			@else {	@return map-get($note4, $attribute);}
		}
		@else if $quality ==  sus2 {
			@if $element == h1{@return map-get($note5, $attribute);}
			@else if $element == h2{@return map-get($note2, $attribute);}
			@else {	@return map-get($note2, $attribute);}
		}
		@else if $quality ==  eleventh {
			@if $element == h1{@return map-get($note11, $attribute);}
			@else if $element == h2{@return map-get($note9, $attribute);}
			@else if $element == h3{@return map-get($noteb7, $attribute);}
			@else if $element == h4{@return map-get($note5, $attribute);}
			@else {	@return map-get($note3, $attribute);}
		}
		@else if $quality ==  min7 {
			@if $element == h1{@return map-get($noteb7, $attribute);}
			@else if $element == h2{@return map-get($note5, $attribute);}
			@else if $element == h3{@return map-get($note3, $attribute);}
			@else if $element == h4{@return map-get($noteb3, $attribute);}
			@else {	@return map-get($noteb3, $attribute);}
		}
		@else if $quality ==  maj7 {
			@if $element == h1{@return map-get($note7, $attribute);}
			@else if $element == h2{@return map-get($note5, $attribute);}
			@else if $element == h3{@return map-get($note3, $attribute);}
			@else if $element == h4{@return map-get($note3, $attribute);}
			@else {	@return map-get($note3, $attribute);}
		}
		@else if $quality ==  dom7 {
			@if $element == h1{@return map-get($noteb7, $attribute);}
			@else if $element == h2{@return map-get($note5, $attribute);}
			@else if $element == h3{@return map-get($noteb3, $attribute);}
			@else if $element == h4{@return map-get($noteb3, $attribute);}
			@else {	@return map-get($noteb3, $attribute);}
		}
		@else if $quality ==  dim7 {
			@if $element == h1{@return map-get($noteb7, $attribute);}
			@else if $element == h2{@return map-get($noteb5, $attribute);}
			@else if $element == h3{@return map-get($noteb3, $attribute);}
			@else if $element == h4{@return map-get($noteb3, $attribute);}
			@else {	@return map-get($noteb3, $attribute);}
		}
		@else if $quality ==  min6 {
			@if $element == h1{@return map-get($note6, $attribute);}
			@else if $element == h2{@return map-get($note5, $attribute);}
			@else if $element == h3{@return map-get($noteb3, $attribute);}
			@else if $element == h4{@return map-get($noteb3, $attribute);}
			@else {	@return map-get($noteb3, $attribute);}
		}
		@else if $quality ==  maj6 {
			@if $element == h1{@return map-get($note6, $attribute);}
			@else if $element == h2{@return map-get($note5, $attribute);}
			@else if $element == h3{@return map-get($note3, $attribute);}
			@else if $element == h4{@return map-get($note3, $attribute);}
			@else {	@return map-get($note3, $attribute);}
		}
		@else if $quality ==  domflat9 {
			@if $element == h1{@return map-get($noteb9, $attribute);}
			@else if $element == h2{@return map-get($noteb7, $attribute);}
			@else if $element == h3{@return map-get($note5, $attribute);}
			@else if $element == h4{@return map-get($note3, $attribute);}
			@else {	@return map-get($note3, $attribute);}
		}
		@else if $quality ==  domsharp9 {
			@if $element == h1{@return map-get($notes9, $attribute);}
			@else if $element == h2{@return map-get($noteb7, $attribute);}
			@else if $element == h3{@return map-get($note5, $attribute);}
			@else if $element == h4{@return map-get($note3, $attribute);}
			@else {	@return map-get($note3, $attribute);}
		}
		@else if $quality ==  min9 {
			@if $element == h1{@return map-get($note9, $attribute);}
			@else if $element == h2{@return map-get($noteb7, $attribute);}
			@else if $element == h3{@return map-get($note5, $attribute);}
			@else if $element == h4{@return map-get($noteb3, $attribute);}
			@else {	@return map-get($noteb3, $attribute);}
		}
		@else if $quality ==  maj9 {
			@if $element == h1{@return map-get($note9, $attribute);}
			@else if $element == h2{@return map-get($note7, $attribute);}
			@else if $element == h3{@return map-get($note5, $attribute);}
			@else if $element == h4{@return map-get($note3, $attribute);}
			@else {	@return map-get($note3, $attribute);}
		}
		@else if $quality ==  perfect5 {
			@if $element == h1{@return map-get($note5, $attribute);}
			@else {@return map-get($note5, $attribute);}
		}
	}
}


@mixin small-search-box{
	top: 0;
	bottom: 0;
	margin: auto;
	height: #{$unit__header--height};
	form {
		width:100%;
		height: #{$unit__header--height};
		&:after{
			content:"";
			position:absolute;
			width:0;
			height:1rem;
			border: 0.2rem solid $color-primary;
			top: #{$unit__header--height / 2};
			right:-0.52rem;
			-webkit-border-radius:3px;
			-webkit-transform: rotate(-45deg);}
		input[type="search"]{
			-webkit-appearance: none;					
			float:right;
			@include transition;
			display:block;
			position:relative;
			bottom: 0.3rem;
			right: -0.3rem;
			outline:none;
			line-height:24px;
			width:1.5rem;					
			-webkit-border-radius:50px;
			outline:none;
			background-color: $color-background;
			border-color: $color-primary;
			&::-webkit-search-cancel-button{
				display: none;}
			&:hover, &:focus{
				width:200px;}
			&:hover::-webkit-input-placeholder{
				color:#cae0ef;
				font-style:italic;
				font-size:13px;}}}			
			::-webkit-input-placeholder{
				color:transparent;}
}
@mixin prefixer($property, $value){
	-webkit-#{$property}: $value;
	-moz-#{$property}: $value;
	-o-#{$property}: $value;
	-ms-#{$property}: $value;
	#{$property}: $value;}

@mixin betwixt($min-width,$max-width){
	@media only screen and (min-width: #{$min-width * 1px}) and (max-width: #{$max-width * 1px}){
		@content;}}

@mixin font-properties-for($element, $multiplier: 1){
	font-size: #{typography($element,font-size) * (1rem * $multiplier)};
	line-height: #{typography($element,line-height) * ($unit__line-height * $multiplier)};
	padding-top: #{typography($element,padding-top) * (1rem * $multiplier)};
	padding-bottom: #{typography($element,padding-bottom) * (1rem * $multiplier)};
	font-weight: #{typography($element,font-weight)};
	font-style: #{typography($element,font-style)};
	margin: 0;}

@mixin opacity($trans) {
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
	-moz-opacity: $trans;
	-khtml-opacity: $trans;
	opacity: $trans;}
@mixin input-disabled{
	background-color: $color-background;
	color: $color-drawer;}

@mixin media-from($width){
	@media only screen and (min-width: #{$width * 1px}){
		@content;
	}
}

@mixin media-to($width){
	@media only screen and (max-width: #{$width * 1px}){
		@content;
	}
}
@import url(http://weloveiconfonts.com/api/?family=entypo);
@import url(http://weloveiconfonts.com/api/?family=fontawesome);

@mixin re-base($side,$amount){
	$otherSide: null;
	@if $side == left {
		$otherSide: "right";}
	@else {
		$otherSide: "left";}
	#{$side}: #{$amount};
	margin-#{$side}: #{$amount * -1};
	padding-#{$otherSide}: #{$amount + $unit__gutter--width};}

